import os 
from os import path

##Make list 1-22. Then add X. These will denote the Chrs
chr_num=[]
for x in range(23):
   if x !=0:
      chr_num.append(str(x))
chr_num.append("X")  
#chr_num.append("Y") 




#Make output directory
if path.exists("data") is not True:
        os.mkdir("data") 
 

rule all: 
    input: ["data/Chr{chr}_SNPs.interval.list".format(chr=s) for s in chr_num]
        
#Get SNP only vcf's from 1000 Genomes Project for each Chr#, index, make interval list.        
rule download1000G_filter:
    output: "data/Chr{chr}_SNPs.interval_list"
    shell:
        """    
        bcftools view --types snps ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/data_collections/1000_genomes_project/release/20190312_biallelic_SNV_and_INDEL/ALL.chr{wildcards.chr}.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased.vcf.gz --output-type z -o data/Chr{wildcards.chr}_SNPs.vcf.gz
        tabix -fp vcf data/Chr{wildcards.chr}_SNPs.vcf.gz
        gatk VcfToIntervalList I=data/Chr{wildcards.chr}_SNPs.vcf.gz O=data/Chr{wildcards.chr}_SNPs.interval_list
        
        
        
        #Make interval list for all chr.
        for i in $(seq 1 22); do echo $i >> list.bed; done
        echo X >> list.bed
        
        cat list | while read i; do
          #Get intervals 
          cat Chr$i\_SNPs.interval_list | grep -v "@" >> interval_list
          #Get @SQ     SN:Chr#   LN:0
          cat Chr$i\_SNPs.interval_list | grep "@" | grep -v "@HD" >> header

        done
        #Get @HD     VN:1.6
        head -1 Chr1_SNPs.interval_list > top

        cat top header interval_list > ChrAll.interval_list

        rm list top header interval_list       
        """

